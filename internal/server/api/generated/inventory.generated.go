//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// Defines values for ResourceInfoAdminState.
const (
	ResourceInfoAdminStateLOCKED       ResourceInfoAdminState = "LOCKED"
	ResourceInfoAdminStateSHUTTINGDOWN ResourceInfoAdminState = "SHUTTING_DOWN"
	ResourceInfoAdminStateUNKNOWN      ResourceInfoAdminState = "UNKNOWN"
	ResourceInfoAdminStateUNLOCKED     ResourceInfoAdminState = "UNLOCKED"
)

// Defines values for ResourceInfoOperationalState.
const (
	ResourceInfoOperationalStateDISABLED ResourceInfoOperationalState = "DISABLED"
	ResourceInfoOperationalStateENABLED  ResourceInfoOperationalState = "ENABLED"
	ResourceInfoOperationalStateUNKNOWN  ResourceInfoOperationalState = "UNKNOWN"
)

// Defines values for ResourceInfoPowerState.
const (
	OFF ResourceInfoPowerState = "OFF"
	ON  ResourceInfoPowerState = "ON"
)

// Defines values for ResourceInfoUsageState.
const (
	ACTIVE  ResourceInfoUsageState = "ACTIVE"
	BUSY    ResourceInfoUsageState = "BUSY"
	IDLE    ResourceInfoUsageState = "IDLE"
	UNKNOWN ResourceInfoUsageState = "UNKNOWN"
)

// APIVersion Information about a version of the API.
type APIVersion struct {
	Version *string `json:"version,omitempty"`
}

// APIVersions Information about a list of versions of the API.
type APIVersions struct {
	ApiVersions *[]APIVersion `json:"apiVersions,omitempty"`
	UriPrefix   *string       `json:"uriPrefix,omitempty"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// ProcessorInfo Information about a processor
type ProcessorInfo struct {
	// Architecture The processor architecture
	Architecture *string `json:"architecture,omitempty"`

	// Cores The total number of physical cores
	Cores *int `json:"cores,omitempty"`

	// Manufacturer The manufacturer of the processor
	Manufacturer *string `json:"manufacturer,omitempty"`

	// Model The manufacturer's processor model name
	Model *string `json:"model,omitempty"`
}

// ResourceInfo Information about a resource.
type ResourceInfo struct {
	// AdminState The administrative state of the resource
	AdminState ResourceInfoAdminState `json:"adminState"`

	// Description Human readable description of the resource.
	Description string `json:"description"`

	// GlobalAssetId Identifier or serial number of the resource, if available.
	GlobalAssetId *string `json:"globalAssetId,omitempty"`

	// Groups Keywords denoting groups a resource belongs to.
	Groups    *[]string `json:"groups,omitempty"`
	HwProfile string    `json:"hwProfile"`

	// Labels Optional labels applied to this resource
	Labels *map[string]string `json:"labels,omitempty"`

	// Memory The total physical memory in MiB
	Memory int `json:"memory"`

	// Model The vendor model name of the resource
	Model string `json:"model"`

	// Name Short name for the resource.
	Name string `json:"name"`

	// OperationalState The operational state of the resource
	OperationalState ResourceInfoOperationalState `json:"operationalState"`

	// PartNumber The vendor part number of the resource
	PartNumber string `json:"partNumber"`

	// PowerState The power state of the resource
	PowerState *ResourceInfoPowerState `json:"powerState,omitempty"`
	Processors []ProcessorInfo         `json:"processors"`

	// ResourceId Identifier for the Resource.
	ResourceId     string `json:"resourceId"`
	ResourcePoolId string `json:"resourcePoolId"`

	// SerialNumber The vendor serial number of the resource
	SerialNumber string `json:"serialNumber"`

	// Tags Keywords describing or classifying the resource instance
	Tags       *[]string              `json:"tags,omitempty"`
	UsageState ResourceInfoUsageState `json:"usageState"`

	// Vendor Vendor or manufacturer name
	Vendor string `json:"vendor"`
}

// ResourceInfoAdminState The administrative state of the resource
type ResourceInfoAdminState string

// ResourceInfoOperationalState The operational state of the resource
type ResourceInfoOperationalState string

// ResourceInfoPowerState The power state of the resource
type ResourceInfoPowerState string

// ResourceInfoUsageState defines model for ResourceInfo.UsageState.
type ResourceInfoUsageState string

// ResourcePoolInfo Information about a resource pool.
type ResourcePoolInfo struct {
	// Description Human readable description of the resource pool.
	Description string `json:"description"`

	// Name Human readable name of the resource pool.
	Name string `json:"name"`

	// ResourcePoolId Identifier for the Resource Pool in the hardware manager instance.
	ResourcePoolId string `json:"resourcePoolId"`

	// SiteId Identifier for the location of the resource pool.
	SiteId *string `json:"siteId,omitempty"`
}

// Subscription Information about an inventory subscription.
type Subscription struct {
	// Callback The fully qualified URI to a consumer procedure which can process a Post of the
	// ResourceChangeNotification.
	Callback string `json:"callback"`

	// ConsumerSubscriptionId Identifier for the consumer of events sent due to the Subscription request.
	ConsumerSubscriptionId *openapi_types.UUID `json:"consumerSubscriptionId,omitempty"`

	// Filter Criteria for events which do not need to be reported or will be filtered by the subscription
	// notification service. Therefore, if a filter is not provided then all events are reported.
	Filter *string `json:"filter,omitempty"`

	// SubscriptionId Identifier for the Subscription. This identifier is allocated by the Hardware Manager.
	SubscriptionId *openapi_types.UUID `json:"subscriptionId,omitempty"`
}

// HwMgrId defines model for hwMgrId.
type HwMgrId = string

// SubscriptionId defines model for subscriptionId.
type SubscriptionId = openapi_types.UUID

// CreateSubscriptionJSONRequestBody defines body for CreateSubscription for application/json ContentType.
type CreateSubscriptionJSONRequestBody = Subscription

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /hardware-manager/inventory/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get minor API versions
	// (GET /hardware-manager/inventory/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Retrieve the list of resource pools
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools)
	GetResourcePools(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId)
	// Retrieve exactly one resource pool
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId})
	GetResourcePool(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, resourcePoolId string)
	// Retrieve the list of resources for a given resource pool
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId}/resources)
	GetResourcePoolResources(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, resourcePoolId string)
	// Retrieve the list of resources
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resources)
	GetResources(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId)
	// Retrieve exactly one resource
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resources/{resourceId})
	GetResource(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, resourceId string)
	// Retrieve the list of inventory subscriptions
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions)
	GetSubscriptions(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId)
	// Create subscription
	// (POST /hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions)
	CreateSubscription(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId)
	// Delete subscription
	// (DELETE /hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions/{subscriptionId})
	DeleteSubscription(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, subscriptionId SubscriptionId)
	// Get subscription
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions/{subscriptionId})
	GetSubscription(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, subscriptionId SubscriptionId)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePools operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId HwMgrId

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePools(w, r, hwMgrId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePool operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId HwMgrId

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	// ------------- Path parameter "resourcePoolId" -------------
	var resourcePoolId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourcePoolId", r.PathValue("resourcePoolId"), &resourcePoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourcePoolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePool(w, r, hwMgrId, resourcePoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePoolResources operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePoolResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId HwMgrId

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	// ------------- Path parameter "resourcePoolId" -------------
	var resourcePoolId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourcePoolId", r.PathValue("resourcePoolId"), &resourcePoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourcePoolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePoolResources(w, r, hwMgrId, resourcePoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResources operation middleware
func (siw *ServerInterfaceWrapper) GetResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId HwMgrId

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResources(w, r, hwMgrId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResource operation middleware
func (siw *ServerInterfaceWrapper) GetResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId HwMgrId

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", r.PathValue("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResource(w, r, hwMgrId, resourceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscriptions operation middleware
func (siw *ServerInterfaceWrapper) GetSubscriptions(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId HwMgrId

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscriptions(w, r, hwMgrId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CreateSubscription operation middleware
func (siw *ServerInterfaceWrapper) CreateSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId HwMgrId

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CreateSubscription(w, r, hwMgrId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// DeleteSubscription operation middleware
func (siw *ServerInterfaceWrapper) DeleteSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId HwMgrId

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteSubscription(w, r, hwMgrId, subscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetSubscription operation middleware
func (siw *ServerInterfaceWrapper) GetSubscription(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId HwMgrId

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	// ------------- Path parameter "subscriptionId" -------------
	var subscriptionId SubscriptionId

	err = runtime.BindStyledParameterWithOptions("simple", "subscriptionId", r.PathValue("subscriptionId"), &subscriptionId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "subscriptionId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetSubscription(w, r, hwMgrId, subscriptionId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools", wrapper.GetResourcePools)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId}", wrapper.GetResourcePool)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId}/resources", wrapper.GetResourcePoolResources)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resources", wrapper.GetResources)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resources/{resourceId}", wrapper.GetResource)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions", wrapper.GetSubscriptions)
	m.HandleFunc("POST "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions", wrapper.CreateSubscription)
	m.HandleFunc("DELETE "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions/{subscriptionId}", wrapper.DeleteSubscription)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions/{subscriptionId}", wrapper.GetSubscription)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolsRequestObject struct {
	HwMgrId HwMgrId `json:"hwMgrId"`
}

type GetResourcePoolsResponseObject interface {
	VisitGetResourcePoolsResponse(w http.ResponseWriter) error
}

type GetResourcePools200JSONResponse []ResourcePoolInfo

func (response GetResourcePools200JSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools400ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools403ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools404ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools500ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools503ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools503ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolRequestObject struct {
	HwMgrId        HwMgrId `json:"hwMgrId"`
	ResourcePoolId string  `json:"resourcePoolId"`
}

type GetResourcePoolResponseObject interface {
	VisitGetResourcePoolResponse(w http.ResponseWriter) error
}

type GetResourcePool200JSONResponse ResourcePoolInfo

func (response GetResourcePool200JSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePool400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePool400ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePool404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePool404ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePool500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePool500ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolResourcesRequestObject struct {
	HwMgrId        HwMgrId `json:"hwMgrId"`
	ResourcePoolId string  `json:"resourcePoolId"`
}

type GetResourcePoolResourcesResponseObject interface {
	VisitGetResourcePoolResourcesResponse(w http.ResponseWriter) error
}

type GetResourcePoolResources200JSONResponse []ResourceInfo

func (response GetResourcePoolResources200JSONResponse) VisitGetResourcePoolResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolResources400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePoolResources400ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolResources500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePoolResources500ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcesRequestObject struct {
	HwMgrId HwMgrId `json:"hwMgrId"`
}

type GetResourcesResponseObject interface {
	VisitGetResourcesResponse(w http.ResponseWriter) error
}

type GetResources200JSONResponse []ResourceInfo

func (response GetResources200JSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResources400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResources400ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResources404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResources404ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResources500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResources500ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResources503ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResources503ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceRequestObject struct {
	HwMgrId    HwMgrId `json:"hwMgrId"`
	ResourceId string  `json:"resourceId"`
}

type GetResourceResponseObject interface {
	VisitGetResourceResponse(w http.ResponseWriter) error
}

type GetResource200JSONResponse ResourceInfo

func (response GetResource200JSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResource400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResource400ApplicationProblemPlusJSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResource404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResource404ApplicationProblemPlusJSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResource500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResource500ApplicationProblemPlusJSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionsRequestObject struct {
	HwMgrId HwMgrId `json:"hwMgrId"`
}

type GetSubscriptionsResponseObject interface {
	VisitGetSubscriptionsResponse(w http.ResponseWriter) error
}

type GetSubscriptions200JSONResponse []Subscription

func (response GetSubscriptions200JSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscriptions400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions401ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscriptions401ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(401)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscriptions403ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscriptions500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscriptionRequestObject struct {
	HwMgrId HwMgrId `json:"hwMgrId"`
	Body    *CreateSubscriptionJSONRequestBody
}

type CreateSubscriptionResponseObject interface {
	VisitCreateSubscriptionResponse(w http.ResponseWriter) error
}

type CreateSubscription201JSONResponse Subscription

func (response CreateSubscription201JSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(201)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription400ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateSubscription400ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type CreateSubscription500ApplicationProblemPlusJSONResponse ProblemDetails

func (response CreateSubscription500ApplicationProblemPlusJSONResponse) VisitCreateSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscriptionRequestObject struct {
	HwMgrId        HwMgrId        `json:"hwMgrId"`
	SubscriptionId SubscriptionId `json:"subscriptionId"`
}

type DeleteSubscriptionResponseObject interface {
	VisitDeleteSubscriptionResponse(w http.ResponseWriter) error
}

type DeleteSubscription200Response struct {
}

func (response DeleteSubscription200Response) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.WriteHeader(200)
	return nil
}

type DeleteSubscription404ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteSubscription404ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type DeleteSubscription500ApplicationProblemPlusJSONResponse ProblemDetails

func (response DeleteSubscription500ApplicationProblemPlusJSONResponse) VisitDeleteSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscriptionRequestObject struct {
	HwMgrId        HwMgrId        `json:"hwMgrId"`
	SubscriptionId SubscriptionId `json:"subscriptionId"`
}

type GetSubscriptionResponseObject interface {
	VisitGetSubscriptionResponse(w http.ResponseWriter) error
}

type GetSubscription200JSONResponse Subscription

func (response GetSubscription200JSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscription400ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetSubscription500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetSubscription500ApplicationProblemPlusJSONResponse) VisitGetSubscriptionResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /hardware-manager/inventory/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get minor API versions
	// (GET /hardware-manager/inventory/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Retrieve the list of resource pools
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools)
	GetResourcePools(ctx context.Context, request GetResourcePoolsRequestObject) (GetResourcePoolsResponseObject, error)
	// Retrieve exactly one resource pool
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId})
	GetResourcePool(ctx context.Context, request GetResourcePoolRequestObject) (GetResourcePoolResponseObject, error)
	// Retrieve the list of resources for a given resource pool
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId}/resources)
	GetResourcePoolResources(ctx context.Context, request GetResourcePoolResourcesRequestObject) (GetResourcePoolResourcesResponseObject, error)
	// Retrieve the list of resources
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resources)
	GetResources(ctx context.Context, request GetResourcesRequestObject) (GetResourcesResponseObject, error)
	// Retrieve exactly one resource
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resources/{resourceId})
	GetResource(ctx context.Context, request GetResourceRequestObject) (GetResourceResponseObject, error)
	// Retrieve the list of inventory subscriptions
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions)
	GetSubscriptions(ctx context.Context, request GetSubscriptionsRequestObject) (GetSubscriptionsResponseObject, error)
	// Create subscription
	// (POST /hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions)
	CreateSubscription(ctx context.Context, request CreateSubscriptionRequestObject) (CreateSubscriptionResponseObject, error)
	// Delete subscription
	// (DELETE /hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions/{subscriptionId})
	DeleteSubscription(ctx context.Context, request DeleteSubscriptionRequestObject) (DeleteSubscriptionResponseObject, error)
	// Get subscription
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/subscriptions/{subscriptionId})
	GetSubscription(ctx context.Context, request GetSubscriptionRequestObject) (GetSubscriptionResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourcePools operation middleware
func (sh *strictHandler) GetResourcePools(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId) {
	var request GetResourcePoolsRequestObject

	request.HwMgrId = hwMgrId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourcePools(ctx, request.(GetResourcePoolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourcePools")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcePoolsResponseObject); ok {
		if err := validResponse.VisitGetResourcePoolsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourcePool operation middleware
func (sh *strictHandler) GetResourcePool(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, resourcePoolId string) {
	var request GetResourcePoolRequestObject

	request.HwMgrId = hwMgrId
	request.ResourcePoolId = resourcePoolId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourcePool(ctx, request.(GetResourcePoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourcePool")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcePoolResponseObject); ok {
		if err := validResponse.VisitGetResourcePoolResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourcePoolResources operation middleware
func (sh *strictHandler) GetResourcePoolResources(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, resourcePoolId string) {
	var request GetResourcePoolResourcesRequestObject

	request.HwMgrId = hwMgrId
	request.ResourcePoolId = resourcePoolId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourcePoolResources(ctx, request.(GetResourcePoolResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourcePoolResources")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcePoolResourcesResponseObject); ok {
		if err := validResponse.VisitGetResourcePoolResourcesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResources operation middleware
func (sh *strictHandler) GetResources(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId) {
	var request GetResourcesRequestObject

	request.HwMgrId = hwMgrId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResources(ctx, request.(GetResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResources")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcesResponseObject); ok {
		if err := validResponse.VisitGetResourcesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResource operation middleware
func (sh *strictHandler) GetResource(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, resourceId string) {
	var request GetResourceRequestObject

	request.HwMgrId = hwMgrId
	request.ResourceId = resourceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResource(ctx, request.(GetResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourceResponseObject); ok {
		if err := validResponse.VisitGetResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscriptions operation middleware
func (sh *strictHandler) GetSubscriptions(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId) {
	var request GetSubscriptionsRequestObject

	request.HwMgrId = hwMgrId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscriptions(ctx, request.(GetSubscriptionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscriptions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionsResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// CreateSubscription operation middleware
func (sh *strictHandler) CreateSubscription(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId) {
	var request CreateSubscriptionRequestObject

	request.HwMgrId = hwMgrId

	var body CreateSubscriptionJSONRequestBody
	if err := json.NewDecoder(r.Body).Decode(&body); err != nil {
		sh.options.RequestErrorHandlerFunc(w, r, fmt.Errorf("can't decode JSON body: %w", err))
		return
	}
	request.Body = &body

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.CreateSubscription(ctx, request.(CreateSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "CreateSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(CreateSubscriptionResponseObject); ok {
		if err := validResponse.VisitCreateSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// DeleteSubscription operation middleware
func (sh *strictHandler) DeleteSubscription(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, subscriptionId SubscriptionId) {
	var request DeleteSubscriptionRequestObject

	request.HwMgrId = hwMgrId
	request.SubscriptionId = subscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.DeleteSubscription(ctx, request.(DeleteSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "DeleteSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(DeleteSubscriptionResponseObject); ok {
		if err := validResponse.VisitDeleteSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetSubscription operation middleware
func (sh *strictHandler) GetSubscription(w http.ResponseWriter, r *http.Request, hwMgrId HwMgrId, subscriptionId SubscriptionId) {
	var request GetSubscriptionRequestObject

	request.HwMgrId = hwMgrId
	request.SubscriptionId = subscriptionId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetSubscription(ctx, request.(GetSubscriptionRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetSubscription")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetSubscriptionResponseObject); ok {
		if err := validResponse.VisitGetSubscriptionResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xbe3PbNhL/KhjezVw7R0l25Hp8/s+xk0bTxNH40fYm8nQgYimiBQEWAGWrHn33GwAk",
	"BT4s0Xk0Ti5/Wabw+O1i97eLXeo+iESaCQ5cq+D4PsiwxClokPa/5PbNQk6I+UhARZJmmgoeHAfXnP6Z",
	"A6IEuKYxBYlEjDBKsCS3WAJKMccLkMMZD8IA7nCaMQiOAyVSGCyBEyEHTETYrhYG1CyZYZ0EYcBxakaW",
	"O4eBhD9zKoEEx1rmEAYqSiDFBpJeZXZRLSlfBOt1GKh8XqF8BGx/WhMyxkdjsjfHA/wDwOAg3o8Hczg6",
	"GMTj8cH82f7+4WEUd4vQALNNkljIFOvgOMhzakY2JVuXg+2pnEwnP4NUVqSmhBPu1qKCIzwXuUYYLd1g",
	"I6tOAJ1MJ07ITIoMpKZgV11ultxIvz/cG+51AKqeiPnvEOlgHXqoVD9YjCptMBUbqx34cEb99SuM7zzo",
	"Bd71TRhQDakd+E8JcXAc/GO0MfRRocyRp8mNSFhKvDL/55JOJcT0rq6TUWnlg8LKR5QvgWshV6Plfj9l",
	"TaWYM0jPQGPKnOPVhSWEGmVhdqK1pPNcN59Pa+MbW4YN9Z/wFeJ5Oi8MvloE4Wr1EGGFCMSUA0GUG6/I",
	"IKIxdV6KhETzFcIcUaOGFLi2z4dBh3TEitW2ghOU5CnmAwmY4DkDBHcZw9xtUG6HtEA6oQqJKMqlBB5B",
	"aRmZ09qw5qCngnOI7BJaIII1nmMFSNMUCBK5bh+I8ValMY+gC+L1xQRJiMHtrBOsN3yhLIwK6cMIZ3yi",
	"UYpXaEWBERTnUicgEfXcgMaIQLURcSa/IQJJu4ArjXXe4V9XCaBXV1dT5AagSBBAsZA9NFltSbmnK8o1",
	"LEBat6CadWpKJULqsHmmKk9TLFeNnZBZd4gm2szKGUFcaBQlmC8AxVKkPkYtHkYczjjcRZBpK12Wy0wo",
	"sNRh4gmjfzmrRJPY7oioQgu6BI4wJ0jYQ9AJ5mgWWBo6njPM/5gFoVNU5Q5IJZgxhJkSaG43X1JSHlLr",
	"VNyDXaaEo0hIQvnCCDh5cfUSXbw8ReP/HB2id+ObTktrKY8qBDwSucQLIG6KGWc2KjCqGW8cCBFRXvlr",
	"YRSbpb+D4WKIckX54tXVm9ffo9sEeN0y0S/mkVVQCpZEqLLnl0lQwHU441QrtMQstwrHSuXG+bTVXUPT",
	"zfiaaJ2p49GotEhPh8NIpDt9Yu3H1Xelg1QcdNNNvhEoJaSJSv1iVVZOaYclGSVUQ6RzCd1+Wc1FtbG+",
	"Eu6ODgeHB12mFQkJD/i7Fhozj9azZKVohBlyc7z1x8+6/DrFPI+xBSO7d/BHeH5YaWIjwIRrYF34U0GA",
	"7V79X8pTk52DbBbV2uO7i+/RryC4+fujYAQdHozH5/2C7gUokcsI+h+7LGYM28dOUsovNdYPHLr9niot",
	"saZLsLRcUVm5qpGO56kx2+vz129Pf3pxFoTB5avrq6vJ+Y+/nb39xQhWfXF9/tO5eXQT7gj3TTyvDB+g",
	"DR9svmwiqkfWS5HWRzu1WCLwZGiBWTAxx+xEKdBdSfjEy74lUiBpzYx9PKGJkniJKTPI6+ju5NHhnr6L",
	"eEwWz5514pAizzqc5ydY3QpJTLrDhTaE7EZ6B47mwARfKKSF2bVKJh+g/k3OmNxOpYipC5gbsDIZZO75",
	"QIPSgzlWNOrCzPAc2Iekem+zIrVzKyGcZYw6Mm4e3Abe/cxtPMCz4BjNAkvl5p9wZkKl+27ufzefBWs/",
	"GG68LIVUyNU2yqqIyg012eYb+rwz99hCH+4a6ZFFl3tVEk7FLcgXZAHo1wtjN126d/e25l6XJstxG5Sx",
	"s9tddhukOUbsjmcLdXijdvLGi/OT568tO5xNLsuP24giw1KfW1/bqlUz7AGf7BIsM9rdIpL9fqcwbw3d",
	"vX35sht4GR6sE/S63dXjfIezlhh2sFR57BfveezlNlMhmNuqTgxCsMGW6Y4hexzaVirtzFvxYjs9msdz",
	"Q5BCoohhpWi8sgmstzCqLlOP4clc4QVUFlNawOTs9YsgDE5OryY/mw/Pry//u8OgnextKX52OjEM4Wcx",
	"raziDBhDEx4Nd6aWnrW0ztQn/jojF7RSAS05rXGuNc+sSLRm9qGfdHSQSU2pN1vyH4v50TkQMnbaToQ+",
	"UuZRrf7h6Uc3jTegdAWMDgw93LPt3b2JBJk5JvyZh83aaeVXj0akqO5LaWURto8qSD7u7SOVWxTG7wPp",
	"Ms1Lr1bayyw5qopuHeXbuolGmLE5jv7oJs84Z2yF/swxM6oh9i6tBcIoEtzcY6W7mZBcArpNaJSgCPPy",
	"toIwmgpXxjTqm/HyaE9taeNc6KqC9kDtoNzlckfpuuPwKoAiRmCUoZC5jiOSg0v3APmrInNQoHSt6NNd",
	"cA6DmDLdFW5OJdWGtyyIYlOnFSJsTYBDdfOXkAmpgRgSvqWMmWduXSBovnK1NB/gjHNPYSaeLWkEQ3SV",
	"gIRYyOI+UCyyqUK44oxZjyPMWInLOFOJ4QHtq8dr3VepgUaV30+gyiAwXrWR8VXp2W+KrkjHARhiesvZ",
	"quwNbHezyqLbvrS25U1H7pHgGkfafCx6EhdA0Ctsst9cMq/6cnt7O5RAEqxt0aVdQJ5OrALskfBFSyTP",
	"G0sKMAGrKB0GreGTavjJdGKDY6OCb+MbxxkNjoPxcG84thFSJ9aht1XgcUZ/W3p9ggXo9rFegM4lV4UX",
	"GYLTUPUjjKxVT6KqdnsmW5iltagqChvrCX4EfcJY1aawwSETXDkeera3V54KcO16GhkrrH30u3LUt+kK",
	"9etcKHfmjUtLHhl6ctwm5hrbsn6nuKWoRp51GBxsBVlU6f79OLCNbkcH3ueYlPRkQPzwWUBMuAZpb10g",
	"lyARSCnksGgs2qK2O+KahQRlGv0uSEFjgjUObsyU7W2ix9tpeV4p5UI+bKRV0T/Fvwv5YO+vZbdvzLJP",
	"x3K/GWNfY2zbw/uaZPnwvmi+r0d+Oudbact6LmoDw9prBO+6VbEZMiqb/eubD7S7XmWB1jWodT3dxqeo",
	"BPhk7PNgb/wZQLwUck4JAT50GA4+A4arTTMWSPsCdYtdghiLnJPh03Nlg2f8NNWWc6/qXuecC9CSwhJq",
	"Qal2b/QJqCKYj8FAo/v6/XLdl5Len5HC7cW6jtd+Wlfg/i8w3XzCsNtmvS+N5T4/w9Ss/MnTS7fXwh2O",
	"tLkU8Ea1529z2tHmhtjTfS+8K+X/gx8/Ko35GlKYJ+Q4j4l2yt62cPGG0af2pl7u8qUk319H4v0t6X2s",
	"c32FOe+nSHe9qNkzzf1IobHVzd4SGZ9gdvsts+0L4rzkiC8k/nblrZ7j+Y0c9Z7OV19ji89d1gY+7YBb",
	"66x+8QF3/zOAuOY414mQ9C8gT6De9gXmy92terXFfcMgE0p3tZ8Ba6i9qdnu/tf91U2pucGHeaw1x+eC",
	"rD5a9Kr7aL3Za6LqukUU+59w7y2dxMjqkrQ69996h72KMM4Ua5r7lCFsdF9/vWHt/IlB12uaZ/a56vw1",
	"ZN2h3MiP41DhzqGNNzQeCppbjNZJvMVoP/8tDrimevVlVRSdGfQ15nB3g9v9Ykc99JPcrVnYE7DAv5+N",
	"a+91eNr7xs7v3UzvS83utexlaWyNn2AMTpnISfslqZPpBF3aabUXsI5HI/vjxUQofXy0d+R+wFzsfd/x",
	"JlbZ1fd/T7q5nlc9f2PbTT2UiZhfLyzmbWoX65v1/wIAAP//N/ed/RhAAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
