//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
	strictnethttp "github.com/oapi-codegen/runtime/strictmiddleware/nethttp"
)

// Defines values for ResourceInfoAdminState.
const (
	ResourceInfoAdminStateLOCKED       ResourceInfoAdminState = "LOCKED"
	ResourceInfoAdminStateSHUTTINGDOWN ResourceInfoAdminState = "SHUTTING_DOWN"
	ResourceInfoAdminStateUNKNOWN      ResourceInfoAdminState = "UNKNOWN"
	ResourceInfoAdminStateUNLOCKED     ResourceInfoAdminState = "UNLOCKED"
)

// Defines values for ResourceInfoOperationalState.
const (
	ResourceInfoOperationalStateDISABLED ResourceInfoOperationalState = "DISABLED"
	ResourceInfoOperationalStateENABLED  ResourceInfoOperationalState = "ENABLED"
	ResourceInfoOperationalStateUNKNOWN  ResourceInfoOperationalState = "UNKNOWN"
)

// Defines values for ResourceInfoUsageState.
const (
	ACTIVE  ResourceInfoUsageState = "ACTIVE"
	BUSY    ResourceInfoUsageState = "BUSY"
	IDLE    ResourceInfoUsageState = "IDLE"
	UNKNOWN ResourceInfoUsageState = "UNKNOWN"
)

// APIVersion Information about a version of the API.
type APIVersion struct {
	Version *string `json:"version,omitempty"`
}

// APIVersions Information about a list of versions of the API.
type APIVersions struct {
	ApiVersions *[]APIVersion `json:"apiVersions,omitempty"`
	UriPrefix   *string       `json:"uriPrefix,omitempty"`
}

// ProblemDetails defines model for ProblemDetails.
type ProblemDetails struct {
	// AdditionalAttributes Any number of additional attributes, as defined in a specification or by an implementation.
	AdditionalAttributes *map[string]string `json:"additionalAttributes,omitempty"`

	// Detail A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`

	// Instance A URI reference that identifies the specific occurrence of the problem.
	// It may yield further information if dereferenced.
	Instance *string `json:"instance,omitempty"`

	// Status The HTTP status code for this occurrence of the problem.
	Status int `json:"status"`

	// Title A short, human-readable summary of the problem type. It should not change from occurrence to occurrence of the problem,
	// except for purposes of localization. If type is given and other than "about:blank", this attribute shall also be provided.
	Title *string `json:"title,omitempty"`

	// Type A URI reference according to IETF RFC 3986 [3] that identifies the problem type. It is encouraged that the URI provides
	// human-readable documentation for the problem (e.g. usingHTML) when dereferenced. When this member is not present,
	// its value is assumed to be "about:blank".
	Type *string `json:"type,omitempty"`
}

// ResourceInfo Information about a resource.
type ResourceInfo struct {
	// AdminState The administrative state of the resource
	AdminState ResourceInfoAdminState `json:"adminState"`

	// Description Human readable description of the resource.
	Description string `json:"description"`

	// GlobalAssetId Identifier or serial number of the resource, if available.
	GlobalAssetId *string `json:"globalAssetId,omitempty"`

	// Name Short name for the resource.
	Name string `json:"name"`

	// OperationalState The operational state of the resource
	OperationalState ResourceInfoOperationalState `json:"operationalState"`

	// ResourceId Identifier for the Resource.
	ResourceId     string                 `json:"resourceId"`
	ResourcePoolId string                 `json:"resourcePoolId"`
	UsageState     ResourceInfoUsageState `json:"usageState"`
}

// ResourceInfoAdminState The administrative state of the resource
type ResourceInfoAdminState string

// ResourceInfoOperationalState The operational state of the resource
type ResourceInfoOperationalState string

// ResourceInfoUsageState defines model for ResourceInfo.UsageState.
type ResourceInfoUsageState string

// ResourcePoolInfo Information about a resource pool.
type ResourcePoolInfo struct {
	// Description Human readable description of the resource pool.
	Description string `json:"description"`

	// Name Human readable name of the resource pool.
	Name string `json:"name"`

	// ResourcePoolId Identifier for the Resource Pool in the hardware manager instance.
	ResourcePoolId string `json:"resourcePoolId"`

	// SiteId Identifier for the location of the resource pool.
	SiteId *string `json:"siteId,omitempty"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get API versions
	// (GET /hardware-manager/inventory/api_versions)
	GetAllVersions(w http.ResponseWriter, r *http.Request)
	// Get minor API versions
	// (GET /hardware-manager/inventory/v1/api_versions)
	GetMinorVersions(w http.ResponseWriter, r *http.Request)
	// Retrieve the list of resource pools
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools)
	GetResourcePools(w http.ResponseWriter, r *http.Request, hwMgrId string)
	// Retrieve exactly one resource pool
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId})
	GetResourcePool(w http.ResponseWriter, r *http.Request, hwMgrId string, resourcePoolId string)
	// Retrieve the list of resources for a given resource pool
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId}/resources)
	GetResourcePoolResources(w http.ResponseWriter, r *http.Request, hwMgrId string, resourcePoolId string)
	// Retrieve the list of resources
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resources)
	GetResources(w http.ResponseWriter, r *http.Request, hwMgrId string)
	// Retrieve exactly one resource
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resources/{resourceId})
	GetResource(w http.ResponseWriter, r *http.Request, hwMgrId string, resourceId string)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// GetAllVersions operation middleware
func (siw *ServerInterfaceWrapper) GetAllVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetAllVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetMinorVersions operation middleware
func (siw *ServerInterfaceWrapper) GetMinorVersions(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetMinorVersions(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePools operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePools(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId string

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePools(w, r, hwMgrId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePool operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePool(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId string

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	// ------------- Path parameter "resourcePoolId" -------------
	var resourcePoolId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourcePoolId", r.PathValue("resourcePoolId"), &resourcePoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourcePoolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePool(w, r, hwMgrId, resourcePoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResourcePoolResources operation middleware
func (siw *ServerInterfaceWrapper) GetResourcePoolResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId string

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	// ------------- Path parameter "resourcePoolId" -------------
	var resourcePoolId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourcePoolId", r.PathValue("resourcePoolId"), &resourcePoolId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourcePoolId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResourcePoolResources(w, r, hwMgrId, resourcePoolId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResources operation middleware
func (siw *ServerInterfaceWrapper) GetResources(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId string

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResources(w, r, hwMgrId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// GetResource operation middleware
func (siw *ServerInterfaceWrapper) GetResource(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "hwMgrId" -------------
	var hwMgrId string

	err = runtime.BindStyledParameterWithOptions("simple", "hwMgrId", r.PathValue("hwMgrId"), &hwMgrId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "hwMgrId", Err: err})
		return
	}

	// ------------- Path parameter "resourceId" -------------
	var resourceId string

	err = runtime.BindStyledParameterWithOptions("simple", "resourceId", r.PathValue("resourceId"), &resourceId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "resourceId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetResource(w, r, hwMgrId, resourceId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/api_versions", wrapper.GetAllVersions)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/api_versions", wrapper.GetMinorVersions)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools", wrapper.GetResourcePools)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId}", wrapper.GetResourcePool)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId}/resources", wrapper.GetResourcePoolResources)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resources", wrapper.GetResources)
	m.HandleFunc("GET "+options.BaseURL+"/hardware-manager/inventory/v1/manager/{hwMgrId}/resources/{resourceId}", wrapper.GetResource)

	return m
}

type GetAllVersionsRequestObject struct {
}

type GetAllVersionsResponseObject interface {
	VisitGetAllVersionsResponse(w http.ResponseWriter) error
}

type GetAllVersions200JSONResponse APIVersions

func (response GetAllVersions200JSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions400ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetAllVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetAllVersions500ApplicationProblemPlusJSONResponse) VisitGetAllVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersionsRequestObject struct {
}

type GetMinorVersionsResponseObject interface {
	VisitGetMinorVersionsResponse(w http.ResponseWriter) error
}

type GetMinorVersions200JSONResponse APIVersions

func (response GetMinorVersions200JSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions400ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetMinorVersions500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetMinorVersions500ApplicationProblemPlusJSONResponse) VisitGetMinorVersionsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolsRequestObject struct {
	HwMgrId string `json:"hwMgrId"`
}

type GetResourcePoolsResponseObject interface {
	VisitGetResourcePoolsResponse(w http.ResponseWriter) error
}

type GetResourcePools200JSONResponse []ResourcePoolInfo

func (response GetResourcePools200JSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools400ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools403ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools403ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(403)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools404ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools500ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePools503ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePools503ApplicationProblemPlusJSONResponse) VisitGetResourcePoolsResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolRequestObject struct {
	HwMgrId        string `json:"hwMgrId"`
	ResourcePoolId string `json:"resourcePoolId"`
}

type GetResourcePoolResponseObject interface {
	VisitGetResourcePoolResponse(w http.ResponseWriter) error
}

type GetResourcePool200JSONResponse ResourcePoolInfo

func (response GetResourcePool200JSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePool400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePool400ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePool404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePool404ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePool500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePool500ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolResourcesRequestObject struct {
	HwMgrId        string `json:"hwMgrId"`
	ResourcePoolId string `json:"resourcePoolId"`
}

type GetResourcePoolResourcesResponseObject interface {
	VisitGetResourcePoolResourcesResponse(w http.ResponseWriter) error
}

type GetResourcePoolResources200JSONResponse []ResourceInfo

func (response GetResourcePoolResources200JSONResponse) VisitGetResourcePoolResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolResources400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePoolResources400ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcePoolResources500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResourcePoolResources500ApplicationProblemPlusJSONResponse) VisitGetResourcePoolResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResourcesRequestObject struct {
	HwMgrId string `json:"hwMgrId"`
}

type GetResourcesResponseObject interface {
	VisitGetResourcesResponse(w http.ResponseWriter) error
}

type GetResources200JSONResponse []ResourceInfo

func (response GetResources200JSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResources400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResources400ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResources404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResources404ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResources500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResources500ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

type GetResources503ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResources503ApplicationProblemPlusJSONResponse) VisitGetResourcesResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(503)

	return json.NewEncoder(w).Encode(response)
}

type GetResourceRequestObject struct {
	HwMgrId    string `json:"hwMgrId"`
	ResourceId string `json:"resourceId"`
}

type GetResourceResponseObject interface {
	VisitGetResourceResponse(w http.ResponseWriter) error
}

type GetResource200JSONResponse ResourceInfo

func (response GetResource200JSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/json")
	w.WriteHeader(200)

	return json.NewEncoder(w).Encode(response)
}

type GetResource400ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResource400ApplicationProblemPlusJSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(400)

	return json.NewEncoder(w).Encode(response)
}

type GetResource404ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResource404ApplicationProblemPlusJSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(404)

	return json.NewEncoder(w).Encode(response)
}

type GetResource500ApplicationProblemPlusJSONResponse ProblemDetails

func (response GetResource500ApplicationProblemPlusJSONResponse) VisitGetResourceResponse(w http.ResponseWriter) error {
	w.Header().Set("Content-Type", "application/problem+json")
	w.WriteHeader(500)

	return json.NewEncoder(w).Encode(response)
}

// StrictServerInterface represents all server handlers.
type StrictServerInterface interface {
	// Get API versions
	// (GET /hardware-manager/inventory/api_versions)
	GetAllVersions(ctx context.Context, request GetAllVersionsRequestObject) (GetAllVersionsResponseObject, error)
	// Get minor API versions
	// (GET /hardware-manager/inventory/v1/api_versions)
	GetMinorVersions(ctx context.Context, request GetMinorVersionsRequestObject) (GetMinorVersionsResponseObject, error)
	// Retrieve the list of resource pools
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools)
	GetResourcePools(ctx context.Context, request GetResourcePoolsRequestObject) (GetResourcePoolsResponseObject, error)
	// Retrieve exactly one resource pool
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId})
	GetResourcePool(ctx context.Context, request GetResourcePoolRequestObject) (GetResourcePoolResponseObject, error)
	// Retrieve the list of resources for a given resource pool
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resourcePools/{resourcePoolId}/resources)
	GetResourcePoolResources(ctx context.Context, request GetResourcePoolResourcesRequestObject) (GetResourcePoolResourcesResponseObject, error)
	// Retrieve the list of resources
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resources)
	GetResources(ctx context.Context, request GetResourcesRequestObject) (GetResourcesResponseObject, error)
	// Retrieve exactly one resource
	// (GET /hardware-manager/inventory/v1/manager/{hwMgrId}/resources/{resourceId})
	GetResource(ctx context.Context, request GetResourceRequestObject) (GetResourceResponseObject, error)
}

type StrictHandlerFunc = strictnethttp.StrictHTTPHandlerFunc
type StrictMiddlewareFunc = strictnethttp.StrictHTTPMiddlewareFunc

type StrictHTTPServerOptions struct {
	RequestErrorHandlerFunc  func(w http.ResponseWriter, r *http.Request, err error)
	ResponseErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

func NewStrictHandler(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: StrictHTTPServerOptions{
		RequestErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		},
		ResponseErrorHandlerFunc: func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusInternalServerError)
		},
	}}
}

func NewStrictHandlerWithOptions(ssi StrictServerInterface, middlewares []StrictMiddlewareFunc, options StrictHTTPServerOptions) ServerInterface {
	return &strictHandler{ssi: ssi, middlewares: middlewares, options: options}
}

type strictHandler struct {
	ssi         StrictServerInterface
	middlewares []StrictMiddlewareFunc
	options     StrictHTTPServerOptions
}

// GetAllVersions operation middleware
func (sh *strictHandler) GetAllVersions(w http.ResponseWriter, r *http.Request) {
	var request GetAllVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetAllVersions(ctx, request.(GetAllVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetAllVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetAllVersionsResponseObject); ok {
		if err := validResponse.VisitGetAllVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetMinorVersions operation middleware
func (sh *strictHandler) GetMinorVersions(w http.ResponseWriter, r *http.Request) {
	var request GetMinorVersionsRequestObject

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetMinorVersions(ctx, request.(GetMinorVersionsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetMinorVersions")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetMinorVersionsResponseObject); ok {
		if err := validResponse.VisitGetMinorVersionsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourcePools operation middleware
func (sh *strictHandler) GetResourcePools(w http.ResponseWriter, r *http.Request, hwMgrId string) {
	var request GetResourcePoolsRequestObject

	request.HwMgrId = hwMgrId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourcePools(ctx, request.(GetResourcePoolsRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourcePools")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcePoolsResponseObject); ok {
		if err := validResponse.VisitGetResourcePoolsResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourcePool operation middleware
func (sh *strictHandler) GetResourcePool(w http.ResponseWriter, r *http.Request, hwMgrId string, resourcePoolId string) {
	var request GetResourcePoolRequestObject

	request.HwMgrId = hwMgrId
	request.ResourcePoolId = resourcePoolId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourcePool(ctx, request.(GetResourcePoolRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourcePool")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcePoolResponseObject); ok {
		if err := validResponse.VisitGetResourcePoolResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResourcePoolResources operation middleware
func (sh *strictHandler) GetResourcePoolResources(w http.ResponseWriter, r *http.Request, hwMgrId string, resourcePoolId string) {
	var request GetResourcePoolResourcesRequestObject

	request.HwMgrId = hwMgrId
	request.ResourcePoolId = resourcePoolId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResourcePoolResources(ctx, request.(GetResourcePoolResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResourcePoolResources")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcePoolResourcesResponseObject); ok {
		if err := validResponse.VisitGetResourcePoolResourcesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResources operation middleware
func (sh *strictHandler) GetResources(w http.ResponseWriter, r *http.Request, hwMgrId string) {
	var request GetResourcesRequestObject

	request.HwMgrId = hwMgrId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResources(ctx, request.(GetResourcesRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResources")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourcesResponseObject); ok {
		if err := validResponse.VisitGetResourcesResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// GetResource operation middleware
func (sh *strictHandler) GetResource(w http.ResponseWriter, r *http.Request, hwMgrId string, resourceId string) {
	var request GetResourceRequestObject

	request.HwMgrId = hwMgrId
	request.ResourceId = resourceId

	handler := func(ctx context.Context, w http.ResponseWriter, r *http.Request, request interface{}) (interface{}, error) {
		return sh.ssi.GetResource(ctx, request.(GetResourceRequestObject))
	}
	for _, middleware := range sh.middlewares {
		handler = middleware(handler, "GetResource")
	}

	response, err := handler(r.Context(), w, r, request)

	if err != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, err)
	} else if validResponse, ok := response.(GetResourceResponseObject); ok {
		if err := validResponse.VisitGetResourceResponse(w); err != nil {
			sh.options.ResponseErrorHandlerFunc(w, r, err)
		}
	} else if response != nil {
		sh.options.ResponseErrorHandlerFunc(w, r, fmt.Errorf("unexpected response type: %T", response))
	}
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
